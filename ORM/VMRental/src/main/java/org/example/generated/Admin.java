///**
// * Autogenerated by Avro
// *
// * DO NOT EDIT DIRECTLY
// */
//package org.example.generated;
//
//import org.apache.avro.message.BinaryMessageDecoder;
//import org.apache.avro.message.BinaryMessageEncoder;
//import org.apache.avro.message.SchemaStore;
//import org.apache.avro.specific.SpecificData;
//
//@org.apache.avro.specific.AvroGenerated
//public class Admin extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
//  private static final long serialVersionUID = 4151387898658930292L;
//
//
//  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Admin\",\"namespace\":\"org.example.generated\",\"fields\":[{\"name\":\"entityId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"maxRentedMachines\",\"type\":\"int\"},{\"name\":\"name\",\"type\":\"string\"}]}");
//  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
//
//  private static final SpecificData MODEL$ = new SpecificData();
//  static {
//    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
//  }
//
//  private static final BinaryMessageEncoder<Admin> ENCODER =
//      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);
//
//  private static final BinaryMessageDecoder<Admin> DECODER =
//      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);
//
//  /**
//   * Return the BinaryMessageEncoder instance used by this class.
//   * @return the message encoder used by this class
//   */
//  public static BinaryMessageEncoder<Admin> getEncoder() {
//    return ENCODER;
//  }
//
//  /**
//   * Return the BinaryMessageDecoder instance used by this class.
//   * @return the message decoder used by this class
//   */
//  public static BinaryMessageDecoder<Admin> getDecoder() {
//    return DECODER;
//  }
//
//  /**
//   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
//   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
//   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
//   */
//  public static BinaryMessageDecoder<Admin> createDecoder(SchemaStore resolver) {
//    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
//  }
//
//  /**
//   * Serializes this Admin to a ByteBuffer.
//   * @return a buffer holding the serialized data for this instance
//   * @throws java.io.IOException if this instance could not be serialized
//   */
//  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
//    return ENCODER.encode(this);
//  }
//
//  /**
//   * Deserializes a Admin from a ByteBuffer.
//   * @param b a byte buffer holding serialized data for an instance of this class
//   * @return a Admin instance decoded from the given buffer
//   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
//   */
//  public static Admin fromByteBuffer(
//      java.nio.ByteBuffer b) throws java.io.IOException {
//    return DECODER.decode(b);
//  }
//
//  private java.util.UUID entityId;
//  private int maxRentedMachines;
//  private CharSequence name;
//
//  /**
//   * Default constructor.  Note that this does not initialize fields
//   * to their default values from the schema.  If that is desired then
//   * one should use <code>newBuilder()</code>.
//   */
//  public Admin() {}
//
//  /**
//   * All-args constructor.
//   * @param entityId The new value for entityId
//   * @param maxRentedMachines The new value for maxRentedMachines
//   * @param name The new value for name
//   */
//  public Admin(java.util.UUID entityId, Integer maxRentedMachines, CharSequence name) {
//    this.entityId = entityId;
//    this.maxRentedMachines = maxRentedMachines;
//    this.name = name;
//  }
//
//  public SpecificData getSpecificData() { return MODEL$; }
//
//  @Override
//  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
//
//  // Used by DatumWriter.  Applications should not call.
//  @Override
//  public Object get(int field$) {
//    switch (field$) {
//    case 0: return entityId;
//    case 1: return maxRentedMachines;
//    case 2: return name;
//    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
//    }
//  }
//
//  private static final org.apache.avro.Conversion<?>[] conversions =
//      new org.apache.avro.Conversion<?>[] {
//      new org.apache.avro.Conversions.UUIDConversion(),
//      null,
//      null,
//      null
//  };
//
//  @Override
//  public org.apache.avro.Conversion<?> getConversion(int field) {
//    return conversions[field];
//  }
//
//  // Used by DatumReader.  Applications should not call.
//  @Override
//  @SuppressWarnings(value="unchecked")
//  public void put(int field$, Object value$) {
//    switch (field$) {
//    case 0: entityId = (java.util.UUID)value$; break;
//    case 1: maxRentedMachines = (Integer)value$; break;
//    case 2: name = (CharSequence)value$; break;
//    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
//    }
//  }
//
//  /**
//   * Gets the value of the 'entityId' field.
//   * @return The value of the 'entityId' field.
//   */
//  public java.util.UUID getEntityId() {
//    return entityId;
//  }
//
//
//  /**
//   * Sets the value of the 'entityId' field.
//   * @param value the value to set.
//   */
//  public void setEntityId(java.util.UUID value) {
//    this.entityId = value;
//  }
//
//  /**
//   * Gets the value of the 'maxRentedMachines' field.
//   * @return The value of the 'maxRentedMachines' field.
//   */
//  public int getMaxRentedMachines() {
//    return maxRentedMachines;
//  }
//
//
//  /**
//   * Sets the value of the 'maxRentedMachines' field.
//   * @param value the value to set.
//   */
//  public void setMaxRentedMachines(int value) {
//    this.maxRentedMachines = value;
//  }
//
//  /**
//   * Gets the value of the 'name' field.
//   * @return The value of the 'name' field.
//   */
//  public CharSequence getName() {
//    return name;
//  }
//
//
//  /**
//   * Sets the value of the 'name' field.
//   * @param value the value to set.
//   */
//  public void setName(CharSequence value) {
//    this.name = value;
//  }
//
//  /**
//   * Creates a new Admin RecordBuilder.
//   * @return A new Admin RecordBuilder
//   */
//  public static Builder newBuilder() {
//    return new Builder();
//  }
//
//  /**
//   * Creates a new Admin RecordBuilder by copying an existing Builder.
//   * @param other The existing builder to copy.
//   * @return A new Admin RecordBuilder
//   */
//  public static Builder newBuilder(Builder other) {
//    if (other == null) {
//      return new Builder();
//    } else {
//      return new Builder(other);
//    }
//  }
//
//  /**
//   * Creates a new Admin RecordBuilder by copying an existing Admin instance.
//   * @param other The existing instance to copy.
//   * @return A new Admin RecordBuilder
//   */
//  public static Builder newBuilder(Admin other) {
//    if (other == null) {
//      return new Builder();
//    } else {
//      return new Builder(other);
//    }
//  }
//
//  /**
//   * RecordBuilder for Admin instances.
//   */
//  @org.apache.avro.specific.AvroGenerated
//  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Admin>
//    implements org.apache.avro.data.RecordBuilder<Admin> {
//
//    private java.util.UUID entityId;
//    private int maxRentedMachines;
//    private CharSequence name;
//
//    /** Creates a new Builder */
//    private Builder() {
//      super(SCHEMA$);
//    }
//
//    /**
//     * Creates a Builder by copying an existing Builder.
//     * @param other The existing Builder to copy.
//     */
//    private Builder(Builder other) {
//      super(other);
//      if (isValidValue(fields()[0], other.entityId)) {
//        this.entityId = data().deepCopy(fields()[0].schema(), other.entityId);
//        fieldSetFlags()[0] = other.fieldSetFlags()[0];
//      }
//      if (isValidValue(fields()[1], other.maxRentedMachines)) {
//        this.maxRentedMachines = data().deepCopy(fields()[1].schema(), other.maxRentedMachines);
//        fieldSetFlags()[1] = other.fieldSetFlags()[1];
//      }
//      if (isValidValue(fields()[2], other.name)) {
//        this.name = data().deepCopy(fields()[2].schema(), other.name);
//        fieldSetFlags()[2] = other.fieldSetFlags()[2];
//      }
//    }
//
//    /**
//     * Creates a Builder by copying an existing Admin instance
//     * @param other The existing instance to copy.
//     */
//    private Builder(Admin other) {
//      super(SCHEMA$);
//      if (isValidValue(fields()[0], other.entityId)) {
//        this.entityId = data().deepCopy(fields()[0].schema(), other.entityId);
//        fieldSetFlags()[0] = true;
//      }
//      if (isValidValue(fields()[1], other.maxRentedMachines)) {
//        this.maxRentedMachines = data().deepCopy(fields()[1].schema(), other.maxRentedMachines);
//        fieldSetFlags()[1] = true;
//      }
//      if (isValidValue(fields()[2], other.name)) {
//        this.name = data().deepCopy(fields()[2].schema(), other.name);
//        fieldSetFlags()[2] = true;
//      }
//    }
//
//    /**
//      * Gets the value of the 'entityId' field.
//      * @return The value.
//      */
//    public java.util.UUID getEntityId() {
//      return entityId;
//    }
//
//
//    /**
//      * Sets the value of the 'entityId' field.
//      * @param value The value of 'entityId'.
//      * @return This builder.
//      */
//    public Builder setEntityId(java.util.UUID value) {
//      validate(fields()[0], value);
//      this.entityId = value;
//      fieldSetFlags()[0] = true;
//      return this;
//    }
//
//    /**
//      * Checks whether the 'entityId' field has been set.
//      * @return True if the 'entityId' field has been set, false otherwise.
//      */
//    public boolean hasEntityId() {
//      return fieldSetFlags()[0];
//    }
//
//
//    /**
//      * Clears the value of the 'entityId' field.
//      * @return This builder.
//      */
//    public Builder clearEntityId() {
//      entityId = null;
//      fieldSetFlags()[0] = false;
//      return this;
//    }
//
//    /**
//      * Gets the value of the 'maxRentedMachines' field.
//      * @return The value.
//      */
//    public int getMaxRentedMachines() {
//      return maxRentedMachines;
//    }
//
//
//    /**
//      * Sets the value of the 'maxRentedMachines' field.
//      * @param value The value of 'maxRentedMachines'.
//      * @return This builder.
//      */
//    public Builder setMaxRentedMachines(int value) {
//      validate(fields()[1], value);
//      this.maxRentedMachines = value;
//      fieldSetFlags()[1] = true;
//      return this;
//    }
//
//    /**
//      * Checks whether the 'maxRentedMachines' field has been set.
//      * @return True if the 'maxRentedMachines' field has been set, false otherwise.
//      */
//    public boolean hasMaxRentedMachines() {
//      return fieldSetFlags()[1];
//    }
//
//
//    /**
//      * Clears the value of the 'maxRentedMachines' field.
//      * @return This builder.
//      */
//    public Builder clearMaxRentedMachines() {
//      fieldSetFlags()[1] = false;
//      return this;
//    }
//
//    /**
//      * Gets the value of the 'name' field.
//      * @return The value.
//      */
//    public CharSequence getName() {
//      return name;
//    }
//
//
//    /**
//      * Sets the value of the 'name' field.
//      * @param value The value of 'name'.
//      * @return This builder.
//      */
//    public Builder setName(CharSequence value) {
//      validate(fields()[2], value);
//      this.name = value;
//      fieldSetFlags()[2] = true;
//      return this;
//    }
//
//    /**
//      * Checks whether the 'name' field has been set.
//      * @return True if the 'name' field has been set, false otherwise.
//      */
//    public boolean hasName() {
//      return fieldSetFlags()[2];
//    }
//
//
//    /**
//      * Clears the value of the 'name' field.
//      * @return This builder.
//      */
//    public Builder clearName() {
//      name = null;
//      fieldSetFlags()[2] = false;
//      return this;
//    }
//
//    @Override
//    @SuppressWarnings("unchecked")
//    public Admin build() {
//      try {
//        Admin record = new Admin();
//        record.entityId = fieldSetFlags()[0] ? this.entityId : (java.util.UUID) defaultValue(fields()[0]);
//        record.maxRentedMachines = fieldSetFlags()[1] ? this.maxRentedMachines : (Integer) defaultValue(fields()[1]);
//        record.name = fieldSetFlags()[2] ? this.name : (CharSequence) defaultValue(fields()[2]);
//        return record;
//      } catch (org.apache.avro.AvroMissingFieldException e) {
//        throw e;
//      } catch (Exception e) {
//        throw new org.apache.avro.AvroRuntimeException(e);
//      }
//    }
//  }
//
//  @SuppressWarnings("unchecked")
//  private static final org.apache.avro.io.DatumWriter<Admin>
//    WRITER$ = (org.apache.avro.io.DatumWriter<Admin>)MODEL$.createDatumWriter(SCHEMA$);
//
//  @Override public void writeExternal(java.io.ObjectOutput out)
//    throws java.io.IOException {
//    WRITER$.write(this, SpecificData.getEncoder(out));
//  }
//
//  @SuppressWarnings("unchecked")
//  private static final org.apache.avro.io.DatumReader<Admin>
//    READER$ = (org.apache.avro.io.DatumReader<Admin>)MODEL$.createDatumReader(SCHEMA$);
//
//  @Override public void readExternal(java.io.ObjectInput in)
//    throws java.io.IOException {
//    READER$.read(this, SpecificData.getDecoder(in));
//  }
//
//}
//
//
//
//
//
//
//
//
//
//
