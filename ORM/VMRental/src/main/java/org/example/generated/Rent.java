///**
// * Autogenerated by Avro
// *
// * DO NOT EDIT DIRECTLY
// */
//package org.example.generated;
//
//import org.apache.avro.message.BinaryMessageDecoder;
//import org.apache.avro.message.BinaryMessageEncoder;
//import org.apache.avro.message.SchemaStore;
//import org.apache.avro.specific.SpecificData;
//
//@org.apache.avro.specific.AvroGenerated
//public class Rent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
//  private static final long serialVersionUID = 444879837350838677L;
//
//
//  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Rent\",\"namespace\":\"org.example.generated\",\"fields\":[{\"name\":\"entityId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"client\",\"type\":{\"type\":\"record\",\"name\":\"Client\",\"fields\":[{\"name\":\"entityId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"firstName\",\"type\":\"string\"},{\"name\":\"surname\",\"type\":\"string\"},{\"name\":\"emailAddress\",\"type\":\"string\"},{\"name\":\"clientType\",\"type\":[{\"type\":\"record\",\"name\":\"Standard\",\"fields\":[{\"name\":\"entityId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"maxRentedMachines\",\"type\":\"int\"},{\"name\":\"name\",\"type\":\"string\"}]},{\"type\":\"record\",\"name\":\"Admin\",\"fields\":[{\"name\":\"entityId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"maxRentedMachines\",\"type\":\"int\"},{\"name\":\"name\",\"type\":\"string\"}]}]},{\"name\":\"currentRents\",\"type\":\"int\"}]}},{\"name\":\"vMachine\",\"type\":[{\"type\":\"record\",\"name\":\"AppleArch\",\"fields\":[{\"name\":\"entityId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"CPUNumber\",\"type\":\"int\"},{\"name\":\"ramSize\",\"type\":\"string\"},{\"name\":\"isRented\",\"type\":\"int\"},{\"name\":\"actualRentalPrice\",\"type\":\"float\"}]},{\"type\":\"record\",\"name\":\"x86\",\"fields\":[{\"name\":\"entityId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"CPUNumber\",\"type\":\"int\"},{\"name\":\"ramSize\",\"type\":\"string\"},{\"name\":\"isRented\",\"type\":\"int\"},{\"name\":\"actualRentalPrice\",\"type\":\"float\"},{\"name\":\"CPUManufacturer\",\"type\":\"string\"}]}]},{\"name\":\"beginTime\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-micros\"}},{\"name\":\"endTime\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-micros\"}],\"default\":null},{\"name\":\"rentCost\",\"type\":\"double\"}]}");
//  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
//
//  private static final SpecificData MODEL$ = new SpecificData();
//  static {
//    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
//    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMicrosConversion());
//  }
//
//  private static final BinaryMessageEncoder<Rent> ENCODER =
//      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);
//
//  private static final BinaryMessageDecoder<Rent> DECODER =
//      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);
//
//  /**
//   * Return the BinaryMessageEncoder instance used by this class.
//   * @return the message encoder used by this class
//   */
//  public static BinaryMessageEncoder<Rent> getEncoder() {
//    return ENCODER;
//  }
//
//  /**
//   * Return the BinaryMessageDecoder instance used by this class.
//   * @return the message decoder used by this class
//   */
//  public static BinaryMessageDecoder<Rent> getDecoder() {
//    return DECODER;
//  }
//
//  /**
//   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
//   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
//   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
//   */
//  public static BinaryMessageDecoder<Rent> createDecoder(SchemaStore resolver) {
//    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
//  }
//
//  /**
//   * Serializes this Rent to a ByteBuffer.
//   * @return a buffer holding the serialized data for this instance
//   * @throws java.io.IOException if this instance could not be serialized
//   */
//  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
//    return ENCODER.encode(this);
//  }
//
//  /**
//   * Deserializes a Rent from a ByteBuffer.
//   * @param b a byte buffer holding serialized data for an instance of this class
//   * @return a Rent instance decoded from the given buffer
//   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
//   */
//  public static Rent fromByteBuffer(
//      java.nio.ByteBuffer b) throws java.io.IOException {
//    return DECODER.decode(b);
//  }
//
//  private java.util.UUID entityId;
//  private Client client;
//  private Object vMachine;
//  private java.time.Instant beginTime;
//  private java.time.Instant endTime;
//  private double rentCost;
//
//  /**
//   * Default constructor.  Note that this does not initialize fields
//   * to their default values from the schema.  If that is desired then
//   * one should use <code>newBuilder()</code>.
//   */
//  public Rent() {}
//
//  /**
//   * All-args constructor.
//   * @param entityId The new value for entityId
//   * @param client The new value for client
//   * @param vMachine The new value for vMachine
//   * @param beginTime The new value for beginTime
//   * @param endTime The new value for endTime
//   * @param rentCost The new value for rentCost
//   */
//  public Rent(java.util.UUID entityId, Client client, Object vMachine, java.time.Instant beginTime, java.time.Instant endTime, Double rentCost) {
//    this.entityId = entityId;
//    this.client = client;
//    this.vMachine = vMachine;
//    this.beginTime = beginTime.truncatedTo(java.time.temporal.ChronoUnit.MICROS);
//    this.endTime = endTime;
//    this.rentCost = rentCost;
//  }
//
//
//  public SpecificData getSpecificData() { return MODEL$; }
//
//  @Override
//  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
//
//  // Used by DatumWriter.  Applications should not call.
//  @Override
//  public Object get(int field$) {
//    switch (field$) {
//    case 0: return entityId;
//    case 1: return client;
//    case 2: return vMachine;
//    case 3: return beginTime;
//    case 4: return endTime;
//    case 5: return rentCost;
//    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
//    }
//  }
//
//  private static final org.apache.avro.Conversion<?>[] conversions =
//      new org.apache.avro.Conversion<?>[] {
//      new org.apache.avro.Conversions.UUIDConversion(),
//      null,
//      null,
//      new org.apache.avro.data.TimeConversions.TimestampMicrosConversion(),
//      null,
//      null,
//      null
//  };
//
//  @Override
//  public org.apache.avro.Conversion<?> getConversion(int field) {
//    return conversions[field];
//  }
//
//  // Used by DatumReader.  Applications should not call.
//  @Override
//  @SuppressWarnings(value="unchecked")
//  public void put(int field$, Object value$) {
//    switch (field$) {
//    case 0: entityId = (java.util.UUID)value$; break;
//    case 1: client = (Client)value$; break;
//    case 2: vMachine = value$; break;
//    case 3: beginTime = (java.time.Instant)value$; break;
//    case 4: endTime = (java.time.Instant)value$; break;
//    case 5: rentCost = (Double)value$; break;
//    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
//    }
//  }
//
//  /**
//   * Gets the value of the 'entityId' field.
//   * @return The value of the 'entityId' field.
//   */
//  public java.util.UUID getEntityId() {
//    return entityId;
//  }
//
//
//  /**
//   * Sets the value of the 'entityId' field.
//   * @param value the value to set.
//   */
//  public void setEntityId(java.util.UUID value) {
//    this.entityId = value;
//  }
//
//  /**
//   * Gets the value of the 'client' field.
//   * @return The value of the 'client' field.
//   */
//  public Client getClient() {
//    return client;
//  }
//
//
//  /**
//   * Sets the value of the 'client' field.
//   * @param value the value to set.
//   */
//  public void setClient(Client value) {
//    this.client = value;
//  }
//
//  /**
//   * Gets the value of the 'vMachine' field.
//   * @return The value of the 'vMachine' field.
//   */
//  public Object getVMachine() {
//    return vMachine;
//  }
//
//
//  /**
//   * Sets the value of the 'vMachine' field.
//   * @param value the value to set.
//   */
//  public void setVMachine(Object value) {
//    this.vMachine = value;
//  }
//
//  /**
//   * Gets the value of the 'beginTime' field.
//   * @return The value of the 'beginTime' field.
//   */
//  public java.time.Instant getBeginTime() {
//    return beginTime;
//  }
//
//
//  /**
//   * Sets the value of the 'beginTime' field.
//   * @param value the value to set.
//   */
//  public void setBeginTime(java.time.Instant value) {
//    this.beginTime = value.truncatedTo(java.time.temporal.ChronoUnit.MICROS);
//  }
//
//  /**
//   * Gets the value of the 'endTime' field.
//   * @return The value of the 'endTime' field.
//   */
//  public java.time.Instant getEndTime() {
//    return endTime;
//  }
//
//
//  /**
//   * Sets the value of the 'endTime' field.
//   * @param value the value to set.
//   */
//  public void setEndTime(java.time.Instant value) {
//    this.endTime = value;
//  }
//
//  /**
//   * Gets the value of the 'rentCost' field.
//   * @return The value of the 'rentCost' field.
//   */
//  public double getRentCost() {
//    return rentCost;
//  }
//
//
//  /**
//   * Sets the value of the 'rentCost' field.
//   * @param value the value to set.
//   */
//  public void setRentCost(double value) {
//    this.rentCost = value;
//  }
//
//  /**
//   * Creates a new Rent RecordBuilder.
//   * @return A new Rent RecordBuilder
//   */
//  public static Builder newBuilder() {
//    return new Builder();
//  }
//
//  /**
//   * Creates a new Rent RecordBuilder by copying an existing Builder.
//   * @param other The existing builder to copy.
//   * @return A new Rent RecordBuilder
//   */
//  public static Builder newBuilder(Builder other) {
//    if (other == null) {
//      return new Builder();
//    } else {
//      return new Builder(other);
//    }
//  }
//
//  /**
//   * Creates a new Rent RecordBuilder by copying an existing Rent instance.
//   * @param other The existing instance to copy.
//   * @return A new Rent RecordBuilder
//   */
//  public static Builder newBuilder(Rent other) {
//    if (other == null) {
//      return new Builder();
//    } else {
//      return new Builder(other);
//    }
//  }
//
//  /**
//   * RecordBuilder for Rent instances.
//   */
//  @org.apache.avro.specific.AvroGenerated
//  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Rent>
//    implements org.apache.avro.data.RecordBuilder<Rent> {
//
//    private java.util.UUID entityId;
//    private Client client;
//    private Client.Builder clientBuilder;
//    private Object vMachine;
//    private java.time.Instant beginTime;
//    private java.time.Instant endTime;
//    private double rentCost;
//
//    /** Creates a new Builder */
//    private Builder() {
//      super(SCHEMA$);
//    }
//
//    /**
//     * Creates a Builder by copying an existing Builder.
//     * @param other The existing Builder to copy.
//     */
//    private Builder(Builder other) {
//      super(other);
//      if (isValidValue(fields()[0], other.entityId)) {
//        this.entityId = data().deepCopy(fields()[0].schema(), other.entityId);
//        fieldSetFlags()[0] = other.fieldSetFlags()[0];
//      }
//      if (isValidValue(fields()[1], other.client)) {
//        this.client = data().deepCopy(fields()[1].schema(), other.client);
//        fieldSetFlags()[1] = other.fieldSetFlags()[1];
//      }
//      if (other.hasClientBuilder()) {
//        this.clientBuilder = Client.newBuilder(other.getClientBuilder());
//      }
//      if (isValidValue(fields()[2], other.vMachine)) {
//        this.vMachine = data().deepCopy(fields()[2].schema(), other.vMachine);
//        fieldSetFlags()[2] = other.fieldSetFlags()[2];
//      }
//      if (isValidValue(fields()[3], other.beginTime)) {
//        this.beginTime = data().deepCopy(fields()[3].schema(), other.beginTime);
//        fieldSetFlags()[3] = other.fieldSetFlags()[3];
//      }
//      if (isValidValue(fields()[4], other.endTime)) {
//        this.endTime = data().deepCopy(fields()[4].schema(), other.endTime);
//        fieldSetFlags()[4] = other.fieldSetFlags()[4];
//      }
//      if (isValidValue(fields()[5], other.rentCost)) {
//        this.rentCost = data().deepCopy(fields()[5].schema(), other.rentCost);
//        fieldSetFlags()[5] = other.fieldSetFlags()[5];
//      }
//    }
//
//    /**
//     * Creates a Builder by copying an existing Rent instance
//     * @param other The existing instance to copy.
//     */
//    private Builder(Rent other) {
//      super(SCHEMA$);
//      if (isValidValue(fields()[0], other.entityId)) {
//        this.entityId = data().deepCopy(fields()[0].schema(), other.entityId);
//        fieldSetFlags()[0] = true;
//      }
//      if (isValidValue(fields()[1], other.client)) {
//        this.client = data().deepCopy(fields()[1].schema(), other.client);
//        fieldSetFlags()[1] = true;
//      }
//      this.clientBuilder = null;
//      if (isValidValue(fields()[2], other.vMachine)) {
//        this.vMachine = data().deepCopy(fields()[2].schema(), other.vMachine);
//        fieldSetFlags()[2] = true;
//      }
//      if (isValidValue(fields()[3], other.beginTime)) {
//        this.beginTime = data().deepCopy(fields()[3].schema(), other.beginTime);
//        fieldSetFlags()[3] = true;
//      }
//      if (isValidValue(fields()[4], other.endTime)) {
//        this.endTime = data().deepCopy(fields()[4].schema(), other.endTime);
//        fieldSetFlags()[4] = true;
//      }
//      if (isValidValue(fields()[5], other.rentCost)) {
//        this.rentCost = data().deepCopy(fields()[5].schema(), other.rentCost);
//        fieldSetFlags()[5] = true;
//      }
//    }
//
//    /**
//      * Gets the value of the 'entityId' field.
//      * @return The value.
//      */
//    public java.util.UUID getEntityId() {
//      return entityId;
//    }
//
//
//    /**
//      * Sets the value of the 'entityId' field.
//      * @param value The value of 'entityId'.
//      * @return This builder.
//      */
//    public Builder setEntityId(java.util.UUID value) {
//      validate(fields()[0], value);
//      this.entityId = value;
//      fieldSetFlags()[0] = true;
//      return this;
//    }
//
//    /**
//      * Checks whether the 'entityId' field has been set.
//      * @return True if the 'entityId' field has been set, false otherwise.
//      */
//    public boolean hasEntityId() {
//      return fieldSetFlags()[0];
//    }
//
//
//    /**
//      * Clears the value of the 'entityId' field.
//      * @return This builder.
//      */
//    public Builder clearEntityId() {
//      entityId = null;
//      fieldSetFlags()[0] = false;
//      return this;
//    }
//
//    /**
//      * Gets the value of the 'client' field.
//      * @return The value.
//      */
//    public Client getClient() {
//      return client;
//    }
//
//
//    /**
//      * Sets the value of the 'client' field.
//      * @param value The value of 'client'.
//      * @return This builder.
//      */
//    public Builder setClient(Client value) {
//      validate(fields()[1], value);
//      this.clientBuilder = null;
//      this.client = value;
//      fieldSetFlags()[1] = true;
//      return this;
//    }
//
//    /**
//      * Checks whether the 'client' field has been set.
//      * @return True if the 'client' field has been set, false otherwise.
//      */
//    public boolean hasClient() {
//      return fieldSetFlags()[1];
//    }
//
//    /**
//     * Gets the Builder instance for the 'client' field and creates one if it doesn't exist yet.
//     * @return This builder.
//     */
//    public Client.Builder getClientBuilder() {
//      if (clientBuilder == null) {
//        if (hasClient()) {
//          setClientBuilder(Client.newBuilder(client));
//        } else {
//          setClientBuilder(Client.newBuilder());
//        }
//      }
//      return clientBuilder;
//    }
//
//    /**
//     * Sets the Builder instance for the 'client' field
//     * @param value The builder instance that must be set.
//     * @return This builder.
//     */
//
//    public Builder setClientBuilder(Client.Builder value) {
//      clearClient();
//      clientBuilder = value;
//      return this;
//    }
//
//    /**
//     * Checks whether the 'client' field has an active Builder instance
//     * @return True if the 'client' field has an active Builder instance
//     */
//    public boolean hasClientBuilder() {
//      return clientBuilder != null;
//    }
//
//    /**
//      * Clears the value of the 'client' field.
//      * @return This builder.
//      */
//    public Builder clearClient() {
//      client = null;
//      clientBuilder = null;
//      fieldSetFlags()[1] = false;
//      return this;
//    }
//
//    /**
//      * Gets the value of the 'vMachine' field.
//      * @return The value.
//      */
//    public Object getVMachine() {
//      return vMachine;
//    }
//
//
//    /**
//      * Sets the value of the 'vMachine' field.
//      * @param value The value of 'vMachine'.
//      * @return This builder.
//      */
//    public Builder setVMachine(Object value) {
//      validate(fields()[2], value);
//      this.vMachine = value;
//      fieldSetFlags()[2] = true;
//      return this;
//    }
//
//    /**
//      * Checks whether the 'vMachine' field has been set.
//      * @return True if the 'vMachine' field has been set, false otherwise.
//      */
//    public boolean hasVMachine() {
//      return fieldSetFlags()[2];
//    }
//
//
//    /**
//      * Clears the value of the 'vMachine' field.
//      * @return This builder.
//      */
//    public Builder clearVMachine() {
//      vMachine = null;
//      fieldSetFlags()[2] = false;
//      return this;
//    }
//
//    /**
//      * Gets the value of the 'beginTime' field.
//      * @return The value.
//      */
//    public java.time.Instant getBeginTime() {
//      return beginTime;
//    }
//
//
//    /**
//      * Sets the value of the 'beginTime' field.
//      * @param value The value of 'beginTime'.
//      * @return This builder.
//      */
//    public Builder setBeginTime(java.time.Instant value) {
//      validate(fields()[3], value);
//      this.beginTime = value.truncatedTo(java.time.temporal.ChronoUnit.MICROS);
//      fieldSetFlags()[3] = true;
//      return this;
//    }
//
//    /**
//      * Checks whether the 'beginTime' field has been set.
//      * @return True if the 'beginTime' field has been set, false otherwise.
//      */
//    public boolean hasBeginTime() {
//      return fieldSetFlags()[3];
//    }
//
//
//    /**
//      * Clears the value of the 'beginTime' field.
//      * @return This builder.
//      */
//    public Builder clearBeginTime() {
//      fieldSetFlags()[3] = false;
//      return this;
//    }
//
//    /**
//      * Gets the value of the 'endTime' field.
//      * @return The value.
//      */
//    public java.time.Instant getEndTime() {
//      return endTime;
//    }
//
//
//    /**
//      * Sets the value of the 'endTime' field.
//      * @param value The value of 'endTime'.
//      * @return This builder.
//      */
//    public Builder setEndTime(java.time.Instant value) {
//      validate(fields()[4], value);
//      this.endTime = value;
//      fieldSetFlags()[4] = true;
//      return this;
//    }
//
//    /**
//      * Checks whether the 'endTime' field has been set.
//      * @return True if the 'endTime' field has been set, false otherwise.
//      */
//    public boolean hasEndTime() {
//      return fieldSetFlags()[4];
//    }
//
//
//    /**
//      * Clears the value of the 'endTime' field.
//      * @return This builder.
//      */
//    public Builder clearEndTime() {
//      endTime = null;
//      fieldSetFlags()[4] = false;
//      return this;
//    }
//
//    /**
//      * Gets the value of the 'rentCost' field.
//      * @return The value.
//      */
//    public double getRentCost() {
//      return rentCost;
//    }
//
//
//    /**
//      * Sets the value of the 'rentCost' field.
//      * @param value The value of 'rentCost'.
//      * @return This builder.
//      */
//    public Builder setRentCost(double value) {
//      validate(fields()[5], value);
//      this.rentCost = value;
//      fieldSetFlags()[5] = true;
//      return this;
//    }
//
//    /**
//      * Checks whether the 'rentCost' field has been set.
//      * @return True if the 'rentCost' field has been set, false otherwise.
//      */
//    public boolean hasRentCost() {
//      return fieldSetFlags()[5];
//    }
//
//
//    /**
//      * Clears the value of the 'rentCost' field.
//      * @return This builder.
//      */
//    public Builder clearRentCost() {
//      fieldSetFlags()[5] = false;
//      return this;
//    }
//
//    @Override
//    @SuppressWarnings("unchecked")
//    public Rent build() {
//      try {
//        Rent record = new Rent();
//        record.entityId = fieldSetFlags()[0] ? this.entityId : (java.util.UUID) defaultValue(fields()[0]);
//        if (clientBuilder != null) {
//          try {
//            record.client = this.clientBuilder.build();
//          } catch (org.apache.avro.AvroMissingFieldException e) {
//            e.addParentField(record.getSchema().getField("client"));
//            throw e;
//          }
//        } else {
//          record.client = fieldSetFlags()[1] ? this.client : (Client) defaultValue(fields()[1]);
//        }
//        record.vMachine = fieldSetFlags()[2] ? this.vMachine :  defaultValue(fields()[2]);
//        record.beginTime = fieldSetFlags()[3] ? this.beginTime : (java.time.Instant) defaultValue(fields()[3]);
//        record.endTime = fieldSetFlags()[4] ? this.endTime : (java.time.Instant) defaultValue(fields()[4]);
//        record.rentCost = fieldSetFlags()[5] ? this.rentCost : (Double) defaultValue(fields()[5]);
//        return record;
//      } catch (org.apache.avro.AvroMissingFieldException e) {
//        throw e;
//      } catch (Exception e) {
//        throw new org.apache.avro.AvroRuntimeException(e);
//      }
//    }
//  }
//
//  @SuppressWarnings("unchecked")
//  private static final org.apache.avro.io.DatumWriter<Rent>
//    WRITER$ = (org.apache.avro.io.DatumWriter<Rent>)MODEL$.createDatumWriter(SCHEMA$);
//
//  @Override public void writeExternal(java.io.ObjectOutput out)
//    throws java.io.IOException {
//    WRITER$.write(this, SpecificData.getEncoder(out));
//  }
//
//  @SuppressWarnings("unchecked")
//  private static final org.apache.avro.io.DatumReader<Rent>
//    READER$ = (org.apache.avro.io.DatumReader<Rent>)MODEL$.createDatumReader(SCHEMA$);
//
//  @Override public void readExternal(java.io.ObjectInput in)
//    throws java.io.IOException {
//    READER$.read(this, SpecificData.getDecoder(in));
//  }
//
//}
//
//
//
//
//
//
//
//
//
//
